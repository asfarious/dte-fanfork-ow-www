# Targeted decisions are possible vs _all_ other characters and shown are in the Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] ('self' MUST be set for decisions targetting only the taker, the other filter types can be set to lessen CPU load)
# ai_target_filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] (which characters for which the AI evaluates the decision.)
#	court: all characters in the AI's host court, including prisoners, and characters currently away (wards, prisoners, etc)
#	home_court: all characters in the AI's home court, including prisoners, and characters currently away (wards, prisoners, etc)
#	vassals: direct vassal rulers of the AI's employer
#	sub_realm: all characters below the AI's employer
#	realm: all characters in the same top realm as the AI
#	dynasty: all members of the same dynasty
#	rivals: your rivals plus any character you have an opinion modifier with 'crime = yes' set (the same set of characters the 'is_foe' trigger evaluates)
#	all: all living characters (Avoid if possible. VERY CPU-HEAVY!)
#

targeted_decisions = {

	commit_suicide = {
		filter = self

		ai = no

		potential = {
			trigger_if = {
				limit = { has_dlc = "Reapers" }

				OR = {
					is_incapable = yes
					trait = depressed
				}
			}
			trigger_else = {
				trait = depressed
			}

			is_adult = yes
			immortal = no
			prisoner = no
			NOT = { has_character_flag = attempting_suicide }
		}

		allow = {
			custom_tooltip = { text = commit_suicide_allow_tooltip }
			custom_tooltip = {
				text = is_not_busy_trigger_tooltip

				trigger_if = {
					limit = { in_seclusion = no }

					is_inaccessible_trigger = no
					NOT = { has_character_flag = do_not_disturb }
				}
			}
		}

		effect = {
			if = {
				limit = { has_dlc = "Reapers" }
				set_character_flag = attempting_suicide

				if = {
					limit = { is_incapable = yes }
					character_event = { id = RIP.30210 }
				}
				else = {
					character_event = { id = RIP.30200 }
				}
			}
			else = {
				prestige = -200

				add_character_modifier = {
					modifier = suicide
					duration = -1
				}

				death = { death_reason = death_suicide }
			}
		}

		ai_will_do = {
			factor = 0
		}
	}

	legitimize_bastard = {
		filter = close_relatives

		ai = no

		from_potential = {
			has_children = yes
			# has_polygamy = no
			# CleanSlate: There is no reason to restrict this to non-polygamists.
			any_child = {
				trait = bastard
			}
		}

		potential = {
			trait = bastard
			is_child_of = FROM
			is_vassal_or_below_of = FROM
		}

		allow = {
			FROM = {
				show_scope_change = no

				trigger_if = {
					limit = {
						NOT = {
							any_owned_bloodline = {
								has_bloodline_flag = bloodline_legitimize
							}
						}
					}

					piety >= 20
				}
			}
		}

		effect = {
			dynasty = FROM
			remove_trait = bastard
			add_trait = legit_bastard
			recalc_succession = yes

			# Take the piety price from the legitimizer
			FROM = {
				show_scope_change = no

				if = {
					limit = {
						NOT = {
							any_owned_bloodline = {
								has_bloodline_flag = bloodline_legitimize
							}
						}
					}
					piety = -20
				}
			}

			# Release Bastard if imprisoned
			if = {
				limit = {
					prisoner = yes
					host = { character = FROM }
				}
				imprison = no
			}

			# Bastard's other parent is pleased
			if = {
				limit = { FROM = { is_female = yes } }

				father = {
					show_scope_change = no

					opinion = {
						who = FROM
						modifier = legitimized_child
						years = 10
					}
				}
			}
			else = {
				mother = {
					show_scope_change = no

					opinion = {
						who = FROM
						modifier = legitimized_child
						years = 10
					}
				}
			}

			FROM = {
				show_scope_change = no

				# Spouses are angry
				any_spouse = {
					limit = { NOT = { is_parent_of = ROOT } }

					opinion = {
						who = ROOT_FROM
						modifier = legitimized_bastard
						years = 20
					}
				}

				# Non-bastard children are angry
				if = {
					limit = {
						any_child = {
							dynasty = ROOT_FROM
							NOR = {
								character = ROOT
								trait = legit_bastard
							}
						}
					}

					custom_tooltip = {
						text = any_child_gets_angry_tt

						any_child = {
							show_scope_change = no

							limit = {
								dynasty = ROOT_FROM
								NOR = {
									character = ROOT
									trait = legit_bastard
								}
							}

							opinion = {
								who = ROOT_FROM
								modifier = legitimized_bastard
								years = 1
							}
						}
					}
				}
			}
		}

		ai_will_do = {
			factor = 0
		}
	}

	# Muslim ruler tries to convince a dynasty member to lose the 'Decadent' Trait
	convince_to_straighten_up = {
		filter = dynasty
		ai_target_filter = dynasty
		ai_check_interval = 6

		hide_in_decisions_list = yes # This decision is shown in the Religion View for each decadent character

		only_playable = yes

		from_potential = {
			uses_decadence = yes
			NOT = { trait = decadent }
			prisoner = no

			father_even_if_dead = {
				OR = {
					is_alive = no
					is_playable = no
				}
			}
		}

		potential = {
			trait = decadent
			lower_tier_than = FROM
			has_regent = no
			is_female = no
			prisoner = no
			NOT = { has_character_flag = negotiated_to_drop_decadence }
		}

		allow = {
			FROM = {
				show_scope_change = no
				piety >= 100
			}
		}

		effect = {
			FROM = { piety = -100 }
			set_character_flag = negotiated_to_drop_decadence
			character_event = { id = 91350 } # Try to convince to lose 'Decadent' trait
		}

		ai_will_do = {
			factor = 1

			trigger = {
				# Not if there's a higher ranking player in the same realm as the target (CleanSlate: Why though?)
				FROM = {
					NOT = {
						any_player = {
							dynasty = ROOT
							higher_tier_than = ROOT
							same_realm = ROOT
						}
					}
				}
			}
		}
	}

	# Unhardcoded decision
	order_to_take_vows = {
		filter = court
		ai_target_filter = court
		ai_check_interval = 120

		only_playable = yes

		from_potential = {
			has_dlc = "Sons of Abraham"
			is_adult = yes
			prisoner = no
			has_regent = no

			trigger_if = {
				limit = { is_alternate_start = yes }

				OR = {
					has_religion_feature = religion_monastic
					has_religion_feature = religion_feature_west_african
				}
			}
			trigger_else = {
				OR = {
					religion_group = christian
					religion_group = indian_group
					religion = manichean
					has_religion_feature = religion_monastic
					has_religion_feature = religion_feature_west_african
				}
			}
		}

		potential = {
			host = { character = FROM }
			religion = FROM
			is_ruler = no
			is_adult = yes
			is_incapable = no

			NOR = {
				trait = monk
				trait = nun
				trait = muni
				trait = aryika
				trait = bhikkhu
				trait = bhikkhuni
				trait = sanyasi
				trait = sanyasini
			}
		}

		allow = {
			trigger_if = {
				limit = {
					dynasty = FROM

					any_owned_bloodline = {
						has_bloodline_flag = bloodline_easy_monks
						bloodline_is_active_for = FROM
						bloodline_is_active_for = ROOT
					}
				}

				# Matilde's Bloodline
				custom_tooltip = {
					text = BLOODLINE_EASIER_VOWS_TOOLTIP
				}
			}
			trigger_else = {
				OR = {
					prisoner = yes

					AND = {
						is_heir = no
						is_married = no
					}
				}
			}

			FROM = {
				piety >= 50
			}
		}

		effect = {
			FROM = {
				show_scope_change = no
				piety = -50
			}

			add_ascetic_trait_effect = yes # Adds religion-based monk-traits

			# For pagans and Altstart
			if = {
				limit = {
					OR = {
						has_religion_feature = religion_monastic
						has_religion_feature = religion_feature_west_african
					}
				}
				if = {
					limit = { is_female = yes }
					add_trait = nun
				}
				else = {
					add_trait = monk
				}
			}

			# Prisoners are freed upon taking the vows
			if = {
				limit = { prisoner = yes }
				imprison = no
			}

			# The vows mean no marriage
			if = {
				limit = { is_married = yes }
				any_spouse = { remove_spouse = ROOT }
			}

			# Monks and Mystics actually join societies
			if = {
				limit = {
					has_dlc = "Mystics"
					is_in_society = no
					is_heretic = no
				}

				if = {
					limit = {
						is_catholic_branch = yes
					}
					custom_tooltip = {
						text = tooltip_vows_monk_joins_society

						random_list = {
							50 = {
								trigger = { religion = catholic }
								join_society = monastic_order_benedictine
							}
							50 = { join_society = monastic_order_dominican }
						}
					}
				}
				else_if = {
					limit = {
						is_orthodox_branch = yes
					}
					custom_tooltip = {
						text = tooltip_vows_monk_joins_society
						join_society = monastic_order_orthodox
					}
				}
				else_if = {
					limit = {
						is_nestorian_branch = yes
					}
					custom_tooltip = {
						text = tooltip_vows_monk_joins_society
						join_society = monastic_order_nestorian
					}
				}
				else_if = {
					limit = {
						is_miaphysite_branch = yes
					}
					custom_tooltip = {
						text = tooltip_vows_monk_joins_society
						join_society = monastic_order_monophysite
					}
				}
				else_if = {
					limit = { religion = hindu }
					custom_tooltip = {
						text = tooltip_vows_monk_joins_society
						join_society = monastic_order_hindu
					}
				}
				else_if = {
					limit = { religion = buddhist }
					custom_tooltip = {
						text = tooltip_vows_monk_joins_society
						join_society = monastic_order_buddhist
					}
				}
				else_if = {
					limit = { religion = jain }
					custom_tooltip = {
						text = tooltip_vows_monk_joins_society
						join_society = monastic_order_jain
					}
				}
			}

			# Moves to Theocracy
			if = {
				limit = {
					any_realm_lord = {
						is_theocracy = yes
						religion = ROOT
					}
				}

				custom_tooltip = {
					text = tooltip_vows_monk_goes_to_theocracy

					random_realm_lord = {
						limit = {
							is_theocracy = yes
							religion = ROOT
						}
						preferred_limit = {
							reverse_opinion = {
								who = FROM
								value >= 20
							}
							vassal_of = FROM
							# The one they just joined
							same_society_as = ROOT
						}
						preferred_limit = {
							vassal_of = FROM
							# The one they just joined
							same_society_as = ROOT
						}
						preferred_limit = {
							# The one they just joined
							same_society_as = ROOT
						}
						preferred_limit = {
							vassal_of = FROM
						}

						ROOT = { move_character = PREV }
					}
				}
			}

			# People have opinions
			if = {
				limit = {
					dynasty = FROM
					NOT = { trait = zealous }
				}

				opinion = {
					modifier = opinion_cloistered_me_family
					who = FROM
					years = 20
				}
			}
			else_if = {
				limit = {
					NOR = {
						dynasty = FROM
						trait = zealous
					}
				}

				opinion = {
					modifier = opinion_cloistered_me
					who = FROM
					years = 20
				}
			}

			# Child reacts
			if = {
				limit = { is_child_of = FROM }

				hidden_effect = {
					FROM = {
						character_event = { id = HFP.23001 }
					}
				}
			}
		}

		ai_will_do = {
			factor = 1

			trigger = {
				FROM = {
					opinion = {
						who = ROOT
						value < 50
					}

					# I'm not a good ruler or they are not a dynastic heir
					trigger_if = {
						limit = { is_benevolent_trigger = yes }

						opinion = {
							who = ROOT
							value < 0
						}
					}
					trigger_else_if = {
						limit = { is_parent_of = ROOT }
						NOT = { dynasty = ROOT }
					}

					# Don't hate you enough to send you off
					trigger_if = {
						limit = { is_benevolent_trigger = yes }

						ROOT = {
							OR = {
								is_child_of = FROM
								prisoner = no
								reverse_opinion = {
									who = FROM
									value >= -20
								}
							}
						}
					}
				}
			}

			# Must protect the line
			mult_modifier = {
				factor = 5
				ROOT = {
					is_child_of = FROM
					NOT = { dynasty = FROM }
				}
			}

			# Hate you
			mult_modifier = {
				factor = 5
				ROOT = {
					is_child_of = FROM
					is_rival = FROM
				}
			}

			# There are better spares
			mult_modifier = {
				factor = 20
				ROOT = {
					is_child_of = FROM
					OR = {
						has_negative_congenital_trigger = yes
						has_infertile_trait_trigger = yes
						has_severe_disability_trigger = yes
					}
				}
				FROM = {
					any_child = {
						is_alive = yes
						has_negative_congenital_trigger = no
						has_infertile_trait_trigger = no
						has_severe_disability_trigger = no
					}
				}
			}

			# Must keep the realm from falling to evil
			mult_modifier = {
				factor = 5
				ROOT = { is_evil_trigger = yes }
				FROM = {
					is_benevolent_trigger = yes
					any_child = {
						is_alive = yes
						is_evil_trigger = no
					}
				}
			}
		}
	}

	send_child_into_hiding = {
		filter = dynasty
		ai_target_filter = dynasty
		ai_check_interval = 12

		is_high_prio = yes

		only_rulers = yes

		from_potential = {
			has_regent = no
			has_children = yes

			trigger_if = {
				limit = { ai = yes }

				OR = {
					trait = amateurish_plotter
					trait = flamboyant_schemer
					trait = intricate_webweaver
					trait = elusive_shadow
				}
			}
		}

		potential = {
			host = { character = FROM }
			is_child_of = FROM
			is_ruler = no
			prisoner = no
			is_inaccessible_trigger = no

			FROM = {
				any_known_plotter = {
					target = ROOT

					OR = {
						has_plot = plot_kill_character
						has_plot = plot_kill_spouse
						ROOT = { has_character_modifier = suspected_murder_plot }
					}
				}

				trigger_if = {
					limit = { ai = yes }

					trigger_if = {
						limit = { ROOT = { is_female = yes } }

						OR = {
							has_law = true_cognatic_succession
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}
					}
					trigger_else = {
						OR = {
							has_law = agnatic_succession
							has_law = cognatic_succession # agnatic-cognatic
							has_law = true_cognatic_succession
						}
					}
				}
			}

			NOR = {
				is_married = FROM
				has_character_flag = do_not_disturb
				has_character_modifier = went_out_of_hiding_timer
				is_plot_target_of = FROM

				# CleanSlate: Not if you're plotting against your own child (you monster)
				any_plotter = {
					target = ROOT
					character = FROM
					has_plot = plot_kill_character
				}
			}
		}

		allow = {
			has_job_title = no
			in_command = no
		}

		effect = {
			custom_tooltip = {
				text = go_into_hiding_info_tooltip

				add_trait = in_hiding
				set_character_flag = do_not_disturb
			}

			hidden_effect = {
				any_plotter = {
					target = ROOT

					limit = {
						OR = {
							has_plot = plot_kill_character
							has_plot = plot_kill_spouse
						}
					}

					if = {
						# CleanSlate: Prevent the AI from firing unneeded notification events
						limit = { ai = yes }

						if = {
							# CleanSlate: Clear the flag directly instead of firing the event that clears it
							limit = { has_character_flag = murder_in_motion }
							clr_character_flag = murder_in_motion
						}
					}
					else = {
						# CleanSlate: Players can have notification events
						if = {
							limit = { has_character_flag = murder_in_motion }
							character_event = { id = CM.6180 } # Notify, remove flag
						}
						else = {
							character_event = { id = CM.6004 } # Notify
						}
					}

					any_backed_character = {
						limit = { ai = no }
						character_event = { id = CM.6004 } # Notify
					}
				}

				any_player = {
					limit = {
						OR = {
							is_married = FROM
							is_child_of = ROOT
							is_lover = ROOT
							is_parent_of = ROOT
							is_rival = ROOT
						}

						NOR = {
							character = FROM

							plot_target_char = {
								character = ROOT
							}

							any_backed_character = {
								plot_target_char = {
									character = ROOT
								}
							}
						}
					}
					character_event = { id = CM.6004 } # Notify
				}
			}
		}

		ai_will_do = {
			factor = 0.5

			mult_modifier = {
				factor = 0.5
				FROM = {
					NOT = { trait = in_hiding }
				}
			}

			mult_modifier = {
				factor = 0.5
				FROM = {
					opinion = {
						who = ROOT
						value < -25
					}
				}
			}

			mult_modifier = {
				factor = 1.5
				FROM = {
					opinion = {
						who = ROOT
						value >= 25
					}
				}
			}

			mult_modifier = {
				factor = 5
				FROM = { trait = in_hiding }
			}

			mult_modifier = {
				factor = 10
				FROM = { trait = paranoid }
			}
		}
	}

	take_child_out_of_hiding = {
		filter = dynasty
		ai_target_filter = dynasty
		ai_check_interval = 12

		is_high_prio = yes

		only_rulers = yes

		from_potential = {
			has_regent = no
			has_children = yes
		}

		potential = {
			trait = in_hiding
			is_ruler = no
			liege = { character = FROM }
			is_child_of = FROM
			prisoner = no
			NOT = { is_married = FROM }
		}

		allow = {
			always = yes
		}

		effect = {
			custom_tooltip = {
				text = come_out_of_hiding_info_tooltip

				clr_character_flag = do_not_disturb
				remove_trait = in_hiding
				add_character_modifier = {
					name = went_out_of_hiding_timer
					months = 6
					hidden = yes
				}
			}

			hidden_effect = {
				any_plotter = {
					target = ROOT

					limit = {
						ai = no
						NOT = { character = FROM }
						OR = {
							has_plot = plot_kill_character
							has_plot = plot_kill_spouse
						}
					}
					character_event = { id = CM.6005 } # Notify
				}

				any_player = {
					limit = {
						NOT = { character = FROM }
						OR = {
							is_parent_of = ROOT
							sibling = ROOT
						}
					}
					character_event = { id = CM.6005 } # Notify
				}
			}
		}

		ai_will_do = {
			factor = 1

			trigger = {
				# Don't take plot targets out of hiding
				FROM = {
					NOT = {
						any_known_plotter = {
							target = ROOT

							OR = {
								has_plot = plot_kill_character
								has_plot = plot_kill_spouse
								ROOT = { has_character_modifier = suspected_murder_plot }
							}
						}
					}
				}
			}

			mult_modifier = {
				factor = 0.3
				FROM = { trait = paranoid }
			}
		}
	}

	go_into_hiding = {
		filter = self
		ai_target_filter = self
		ai_check_interval = 12

		is_high_prio = yes

		only_playable = yes

		potential = {
			is_inaccessible_trigger = no
			prisoner = no

			any_known_plotter = {
				target = ROOT

				OR = {
					has_plot = plot_kill_character
					has_plot = plot_kill_spouse
					ROOT = { has_character_modifier = suspected_murder_plot }
				}
			}

			NOR = {
				has_character_flag = do_not_disturb
				has_character_modifier = went_out_of_hiding_timer
			}

			trigger_if = {
				limit = { ai = yes }

				OR = {
					trait = amateurish_plotter
					trait = flamboyant_schemer
					trait = intricate_webweaver
					trait = elusive_shadow
				}
			}
		}

		allow = {
			has_job_title = no
			in_command = no
		}

		effect = {
			custom_tooltip = {
				text = go_into_hiding_info_tooltip

				add_trait = in_hiding
				set_character_flag = do_not_disturb
			}

			# Notify player and close family and plotters
			hidden_effect = {
				any_plotter = {
					target = ROOT
					limit = {
						OR = {
							has_plot = plot_kill_character
							has_plot = plot_kill_spouse
						}
					}

					# CleanSlate: AI doesn't need notification events
					if = {
						limit = { ai = yes }
						if = {
							limit = { has_character_flag = murder_in_motion }
							clr_character_flag = murder_in_motion
						}
					}

					# CleanSlate: Players do
					else = {
						if = {
							limit = { has_character_flag = murder_in_motion }
							character_event = { id = CM.6180 }
						}
						character_event = { id = CM.6000 }
					}
					any_backed_character = {
						limit = { ai = no }
						character_event = { id = CM.6000 }
					}
				}

				any_player = {
					limit = {
						is_close_relative = ROOT

						NOR = {
							plot_target_char = {
								character = ROOT
							}

							any_backed_character = {
								plot_target_char = {
									character = ROOT
								}
							}
						}
					}
					character_event = { id = CM.6000 }
				}
			}
		}

		ai_will_do = {
			factor = 0.5

			mult_modifier = {
				factor = 0.1
				age >= 65
			}

			mult_modifier = {
				factor = 0.1
				trait = brave
			}

			mult_modifier = {
				factor = 2
				trait = depressed
			}

			mult_modifier = {
				factor = 5
				trait = craven
			}

			mult_modifier = {
				factor = 10
				trait = paranoid
			}
		}
	}

	come_out_of_hiding = {
		filter = self
		ai_target_filter = self
		ai_check_interval = 12

		is_high_prio = yes

		only_rulers = yes

		potential = {
			trait = in_hiding
			NOT = { has_character_flag = in_religious_seclusion }
		}

		allow = {
			OR = {
				age >= 16
				is_incapable = no

				regent = {
					NOR = {
						trait = deceitful
						trait = ambitious
						is_rival = ROOT
					}
				}
			}
		}

		effect = {
			custom_tooltip = {
				text = come_out_of_hiding_info_tooltip

				clr_character_flag = do_not_disturb
				remove_trait = in_hiding

				add_character_modifier = {
					name = went_out_of_hiding_timer
					months = 6
					hidden = yes
				}
			}

			# Notify player and close family and plotters
			hidden_effect = {
				any_plotter = {
					target = ROOT

					limit = {
						ai = no # CleanSlate: AI don't need notification events
						OR = {
							has_plot = plot_kill_character
							has_plot = plot_kill_spouse
						}
					}
					character_event = { id = CM.6001 }
				}

				any_player = {
					limit = {
						is_close_relative = ROOT

						NOR = {
							plot_target_char = {
								character = ROOT
							}

							any_backed_character = {
								plot_target_char = {
									character = ROOT
								}
							}
						}
					}
					character_event = { id = CM.6001 }
				}
			}
		}

		ai_will_do = {
			factor = 1

			trigger = {
				# Stay in hiding if still a (suspected) target of a plot
				NOT = {
					any_known_plotter = {
						target = ROOT

						OR = {
							has_plot = plot_kill_character
							has_plot = plot_kill_spouse
							ROOT = { has_character_modifier = suspected_murder_plot }
						}
					}
				}
			}

			mult_modifier = {
				factor = 0.3
				trait = paranoid
			}
		}
	}

	send_spouse_into_hiding = {
		only_rulers = yes
		is_high_prio = yes

		filter = spouse
		ai_target_filter = spouse
		ai_check_interval = 12

		from_potential = {
			is_ruler = yes
			has_regent = no

			trigger_if = {
				limit = { ai = yes }

				OR = {
					trait = amateurish_plotter
					trait = flamboyant_schemer
					trait = intricate_webweaver
					trait = elusive_shadow
				}
			}
		}

		potential = {
			liege = { character = FROM }
			is_married = FROM
			is_ruler = no
			is_inaccessible_trigger = no

			FROM = {
				any_known_plotter = {
					target = ROOT

					OR = {
						has_plot = plot_kill_character
						has_plot = plot_kill_spouse
						ROOT = { has_character_modifier = suspected_murder_plot }
					}
				}
			}

			NOR = {
				has_character_modifier = went_out_of_hiding_timer
				has_character_flag = do_not_disturb

				# CleanSlate: Not if you're plotting against your spouse yourself (you monster)
				trigger_if = {
					limit = { is_plot_target_of = FROM }
					FROM = { has_plot = plot_kill_spouse }
				}
			}
		}

		allow = {
			has_job_title = no
			in_command = no
			prisoner = no
		}

		effect = {
			custom_tooltip = {
				text = go_into_hiding_info_tooltip

				add_trait = in_hiding
				set_character_flag = do_not_disturb
			}

			hidden_effect = { # Notify player and close family and plotters
				any_plotter = {
					target = ROOT

					limit = {
						OR = {
							has_plot = plot_kill_character
							has_plot = plot_kill_spouse
						}
					}

					# CleanSlate: Players don't need notification events
					if = {
						limit = { ai = yes }
						if = {
							limit = { has_character_flag = murder_in_motion }
							clr_character_flag = murder_in_motion
						}
					}

					# CleanSlate: Players do
					else = {
						if = {
							limit = { has_character_flag = murder_in_motion }
							character_event = { id = CM.6180 }
						}
						else = {
							character_event = { id = CM.6002 }
						}
					}
					any_backed_character = {
						limit = { ai = no }
						character_event = { id = CM.6002 }
					}
				}

				any_player = {
					limit = {
						is_close_relative = ROOT

						NOR = {
							character = FROM

							plot_target_char = {
								character = ROOT
							}

							any_backed_character = {
								plot_target_char = {
									character = ROOT
								}
							}
						}
					}
					character_event = { id = CM.6002 }
				}
			}
		}

		ai_will_do = {
			factor = 0.5

			mult_modifier = {
				factor = 0.1
				ROOT = { age >= 65 }
			}

			mult_modifier = {
				factor = 0.1
				FROM = {
					trait = pregnant
					father_of_unborn_known = yes
					father_of_unborn = { NOT = { character = ROOT } }
				}
			}

			mult_modifier = {
				factor = 10
				FROM = {
					trait = pregnant
					father_of_unborn_known = yes
					father_of_unborn = { character = ROOT }
				}
			}

			mult_modifier = {
				factor = 0.1
				ROOT = {
					trait = pregnant
					father_of_unborn_known = yes
					father_of_unborn = { NOT = { character = FROM } }
				}
			}

			mult_modifier = {
				factor = 10
				ROOT = {
					trait = pregnant
					father_of_unborn_known = yes
					father_of_unborn = { character = FROM }
				}
			}

			mult_modifier = {
				factor = 0.5
				FROM = {
					NOT = { trait = in_hiding }
				}
			}

			mult_modifier = {
				factor = 0.5
				FROM = {
					opinion = {
						who = ROOT
						value < -25
					}
				}
			}

			mult_modifier = {
				factor = 1.5
				FROM = {
					opinion = {
						who = ROOT
						value >= 25
					}
				}
			}

			mult_modifier = {
				factor = 5
				FROM = { trait = in_hiding }
			}

			mult_modifier = {
				factor = 10
				FROM = { trait = paranoid }
			}
		}
	}

	take_spouse_out_of_hiding = {
		filter = spouse
		ai_target_filter = spouse
		ai_check_interval = 12

		is_high_prio = yes

		only_rulers = yes

		from_potential = {
			has_regent = no
		}

		potential = {
			liege = { character = FROM }
			trait = in_hiding
			is_ruler = no
			is_married = FROM
			prisoner = no
		}

		allow = {
			always = yes
		}

		effect = {
			custom_tooltip = {
				text = come_out_of_hiding_info_tooltip

				remove_trait = in_hiding
				clr_character_flag = do_not_disturb
				add_character_modifier = {
					name = went_out_of_hiding_timer
					months = 6
					hidden = yes
				}
			}

			# Notify players and close family and plotters
			hidden_effect = {
				any_plotter = {
					target = ROOT

					limit = {
						ai = no
						OR = {
							has_plot = plot_kill_character
							has_plot = plot_kill_spouse
						}
					}
					character_event = { id = CM.6003 }
				}

				any_player = {
					limit = {
						is_close_relative = ROOT
						NOR = {
							character = FROM
							plot_target_char = { character = ROOT }
						}
					}
					character_event = { id = CM.6003 }
				}
			}
		}

		ai_will_do = {
			factor = 1

			trigger = {
				# Only if no longer a (suspected) plot target
				NOT = {
					FROM = {
						any_known_plotter = {
							target = ROOT

							OR = {
								has_plot = plot_kill_character
								has_plot = plot_kill_spouse
								ROOT = { has_character_modifier = suspected_murder_plot }
							}
						}
					}
				}
			}

			mult_modifier = {
				factor = 0.3
				FROM = { trait = paranoid }
			}
		}
	}
}